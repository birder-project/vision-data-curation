stages:
  - test
  - build
  - deploy
  - release

all-test-job:
  stage: test
  image: python:3.11
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - pip install -r requirements/requirements-pytorch-cpu.txt
    - pip install -r requirements/requirements-dev.txt
    - pip install -r requirements/requirements.txt
    - inv ci --failfast

build-job:
  stage: build
  image: python:3.11
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - pip install --upgrade pip wheel build twine
    - python -m build
    - twine check dist/*
  artifacts:
    paths:
      - dist/*.whl
      - dist/*.tar.gz

publish:
  stage: deploy
  image: python:3.11
  dependencies:
    - build-job
  id_tokens:
    PYPI_ID_TOKEN:
      # Use "testpypi" if uploading to TestPyPI
      aud: pypi
  rules:
    - if: $CI_COMMIT_TAG
  script:
    # Install dependencies
    - apt update && apt install -y jq
    - pip install --upgrade twine id
    # Retrieve the OIDC token from GitLab CI/CD, and exchange it for a PyPI API token
    - oidc_token=$(python -m id PYPI)
    # Replace "https://pypi.org/*" with "https://test.pypi.org/*" if uploading to TestPyPI
    - resp=$(curl -X POST https://pypi.org/_/oidc/mint-token -d "{\"token\":\"${oidc_token}\"}")
    - api_token=$(jq --raw-output '.token' <<< "${resp}")
    # Add "--repository testpypi" if uploading to TestPyPI
    - twine upload -u __token__ -p "${api_token}" dist/*
  environment: release

release-job:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - echo "Running release-job"
  release:
    tag_name: "$CI_COMMIT_TAG"
    description: "$CI_COMMIT_TAG"
